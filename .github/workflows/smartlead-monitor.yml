name: Smartlead Account Monitor

on:
  schedule:
    # Run every hour at minute 5
    - cron: '5 * * * *'
  workflow_dispatch:
    inputs:
      first_run:
        description: 'Is this the first run? (yes/no)'
        required: false
        default: 'no'

env:
  SMARTLEAD_BEARER_TOKEN: ${{ secrets.SMARTLEAD_BEARER_TOKEN }}
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  TZ: 'UTC'

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Changed from 15 to 10 minutes max
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create necessary directories
      run: |
        mkdir -p audit_logs
        mkdir -p state
    
    - name: Restore state from artifact
      uses: actions/download-artifact@v4
      with:
        name: monitor-state
        path: state/
      continue-on-error: true
      id: download-artifact
    
    - name: Create state directory if artifact not found
      if: steps.download-artifact.outcome == 'failure'
      run: |
        echo "No previous state found, creating state directory"
        mkdir -p state
    
    - name: Run monitor check
      run: |
        if [ "${{ github.event.inputs.first_run }}" = "yes" ]; then
          python smartlead_monitor.py --first-run
        else
          python smartlead_monitor.py
        fi
      env:
        PYTHONUNBUFFERED: "1"
    
    - name: Save state as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: monitor-state
        path: state/
        retention-days: 7
        overwrite: true
    
    - name: Upload audit logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: audit-logs-${{ github.run_number }}
        path: audit_logs/
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload application logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: app-logs-${{ github.run_number }}
        path: smartlead_monitor.log
        retention-days: 7
        if-no-files-found: warn
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "Monitor check failed. Check logs for details."
        # You can add additional failure notifications here

  cleanup:
    runs-on: ubuntu-latest
    needs: monitor
    if: always()
    
    steps:
    - name: Cleanup old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const oneWeekAgo = new Date();
          oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
          
          for (const artifact of artifacts.data.artifacts) {
            if (artifact.name.startsWith('app-logs-') && new Date(artifact.created_at) < oneWeekAgo) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted old artifact: ${artifact.name}`);
            }
          }
